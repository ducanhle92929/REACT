import express from "express"
import fs from "fs/promises"
import cors from "cors"

const app = express()
const port = 3000

app.use(cors())
app.use(express.json())

const habitsFile = "habits.json"
const progressFile = "progress.json"

// H√†m ƒë·ªçc d·ªØ li·ªáu t·ª´ file
async function readData(file) {
  try {
    const data = await fs.readFile(file, "utf8")
    return JSON.parse(data)
  } catch (error) {
    console.error("L·ªói khi ƒë·ªçc file:", error)
    return []
  }
}

// H√†m ghi d·ªØ li·ªáu v√†o file
async function writeData(file, data) {
  try {
    await fs.writeFile(file, JSON.stringify(data, null, 2))
    console.log("ƒê√£ ghi d·ªØ li·ªáu v√†o file:", file)
  } catch (error) {
    console.error("L·ªói khi ghi file:", error)
  }
}

// H√†m t·∫°o ID duy nh·∫•t
function generateUniqueId() {
  const timestamp = Date.now()
  const randomNum = Math.floor(Math.random() * 10000)
  const id = `habit_${timestamp}_${randomNum}`
  console.log("üî• T·∫°o ID m·ªõi:", id)
  return id
}

app.listen(port, () => {
  console.log(`üöÄ Server ƒëang l·∫Øng nghe t·∫°i http://localhost:${port}`)
  console.log(`üîß Server version: NEW_VERSION_WITH_DEBUG`)
})

// API test ƒë·ªÉ ki·ªÉm tra server
app.get("/api/test", (req, res) => {
  console.log("üß™ Test endpoint ƒë∆∞·ª£c g·ªçi")

  const testId = generateUniqueId()
  console.log("üß™ Test ID:", testId)

  res.json({
    message: "Server ƒëang ho·∫°t ƒë·ªông v·ªõi code m·ªõi",
    version: "NEW_VERSION_WITH_DEBUG",
    testId: testId,
    timestamp: new Date().toISOString(),
  })
})

// API test t·∫°o ID
app.post("/api/test-id", (req, res) => {
  console.log("üß™ Test ID endpoint ƒë∆∞·ª£c g·ªçi")

  const newId = generateUniqueId()
  console.log("üß™ Generated ID:", newId)
  console.log("üß™ ID length:", newId.length)
  console.log("üß™ ID is empty:", newId === "")

  const testObject = {
    id: newId,
    name: "Test",
    createdAt: new Date().toISOString(),
  }

  console.log("üß™ Test object:", JSON.stringify(testObject, null, 2))

  res.json(testObject)
})

// API l·∫•y danh s√°ch th√≥i quen
app.get("/api/habits", async (req, res) => {
  try {
    const habits = await readData(habitsFile)
    res.json(habits)
  } catch (error) {
    console.error("L·ªói khi l·∫•y danh s√°ch th√≥i quen:", error)
    res.status(500).json({ error: "Kh√¥ng th·ªÉ l·∫•y danh s√°ch th√≥i quen" })
  }
})

// API t·∫°o th√≥i quen m·ªõi
app.post("/api/habits", async (req, res) => {
  try {
    console.log("=" * 50)
    console.log("üì• NH·∫¨N Y√äU C·∫¶U T·∫†O TH√ìI QUEN M·ªöI")
    console.log("=" * 50)
    console.log("Request body:", JSON.stringify(req.body, null, 2))

    const habits = await readData(habitsFile)

    // T·∫°o ID m·ªõi
    console.log("üîÑ B·∫Øt ƒë·∫ßu t·∫°o ID...")
    const newId = generateUniqueId()
    console.log("‚úÖ ID ƒë∆∞·ª£c t·∫°o:", newId)
    console.log("‚úÖ Ki·ªÉm tra ID:")
    console.log("   - newId:", newId)
    console.log("   - typeof newId:", typeof newId)
    console.log("   - newId.length:", newId.length)
    console.log("   - newId === '':", newId === "")
    console.log("   - !newId:", !newId)

    // T·∫°o th√≥i quen m·ªõi - HO√ÄN TO√ÄN TH·ª¶ C√îNG
    console.log("üîÑ T·∫°o object th√≥i quen...")
    const newHabit = {}
    newHabit.id = newId
    newHabit.name = req.body.name || ""
    newHabit.category = req.body.category || ""
    newHabit.iconIndex = req.body.iconIndex || 0
    newHabit.target = req.body.target || 0
    newHabit.unit = req.body.unit || ""
    newHabit.frequency = req.body.frequency || ""
    newHabit.reminders = req.body.reminders || ""
    newHabit.color = req.body.color || ""
    newHabit.createdAt = new Date().toISOString()
    newHabit.updatedAt = new Date().toISOString()

    console.log("üîç KI·ªÇM TRA TH√ìI QUEN M·ªöI:")
    console.log("   - newHabit.id:", newHabit.id)
    console.log("   - typeof newHabit.id:", typeof newHabit.id)
    console.log("   - newHabit.id.length:", newHabit.id.length)
    console.log("   - newHabit.id === '':", newHabit.id === "")
    console.log("   - !newHabit.id:", !newHabit.id)
    console.log("Full object:", JSON.stringify(newHabit, null, 2))

    // Ki·ªÉm tra ID c√≥ h·ª£p l·ªá kh√¥ng
    if (!newHabit.id || newHabit.id === "") {
      console.error("‚ùå L·ªñI: ID kh√¥ng h·ª£p l·ªá sau khi t·∫°o")
      console.error("newHabit.id:", newHabit.id)
      return res.status(400).json({ error: "Kh√¥ng th·ªÉ t·∫°o ID cho th√≥i quen m·ªõi" })
    }

    // Th√™m v√†o danh s√°ch
    console.log("üîÑ Th√™m v√†o danh s√°ch...")
    habits.push(newHabit)

    // L∆∞u v√†o file
    console.log("üîÑ L∆∞u v√†o file...")
    await writeData(habitsFile, habits)

    console.log("‚úÖ ƒê√É T·∫†O TH√ìI QUEN M·ªöI TH√ÄNH C√îNG")
    console.log("üì§ CHU·∫®N B·ªä TR·∫¢ V·ªÄ RESPONSE:")
    console.log("Response object:", JSON.stringify(newHabit, null, 2))
    console.log("Response ID:", newHabit.id)

    // Tr·∫£ v·ªÅ th√≥i quen m·ªõi
    res.status(201).json(newHabit)
  } catch (error) {
    console.error("‚ùå L·ªñI KHI T·∫†O TH√ìI QUEN M·ªöI:", error)
    res.status(500).json({ error: "Kh√¥ng th·ªÉ t·∫°o th√≥i quen m·ªõi: " + error.message })
  }
})

// API c·∫≠p nh·∫≠t th√≥i quen
app.put("/api/habits/:id", async (req, res) => {
  try {
    const habitId = req.params.id
    console.log("üìù Nh·∫≠n y√™u c·∫ßu c·∫≠p nh·∫≠t th√≥i quen:", habitId, req.body)

    const habits = await readData(habitsFile)
    const index = habits.findIndex((h) => h.id === habitId)

    if (index === -1) {
      return res.status(404).json({ error: "Kh√¥ng t√¨m th·∫•y th√≥i quen" })
    }

    // C·∫≠p nh·∫≠t th√≥i quen
    const updatedHabit = {
      ...habits[index],
      ...req.body,
      id: habitId, // ƒê·∫£m b·∫£o ID kh√¥ng thay ƒë·ªïi
      updatedAt: new Date().toISOString(),
    }

    habits[index] = updatedHabit

    // L∆∞u v√†o file
    await writeData(habitsFile, habits)

    console.log("‚úÖ ƒê√£ c·∫≠p nh·∫≠t th√≥i quen th√†nh c√¥ng:", updatedHabit)

    res.json(updatedHabit)
  } catch (error) {
    console.error("‚ùå L·ªói khi c·∫≠p nh·∫≠t th√≥i quen:", error)
    res.status(500).json({ error: "Kh√¥ng th·ªÉ c·∫≠p nh·∫≠t th√≥i quen" })
  }
})

// API x√≥a th√≥i quen
app.delete("/api/habits/:id", async (req, res) => {
  try {
    const habitId = req.params.id
    console.log("üóëÔ∏è Nh·∫≠n y√™u c·∫ßu x√≥a th√≥i quen:", habitId)

    const habits = await readData(habitsFile)
    const index = habits.findIndex((h) => h.id === habitId)

    if (index === -1) {
      return res.status(404).json({ error: "Kh√¥ng t√¨m th·∫•y th√≥i quen" })
    }

    // X√≥a th√≥i quen
    habits.splice(index, 1)

    // L∆∞u v√†o file
    await writeData(habitsFile, habits)

    console.log("‚úÖ ƒê√£ x√≥a th√≥i quen th√†nh c√¥ng:", habitId)

    res.json({ message: "ƒê√£ x√≥a th√≥i quen th√†nh c√¥ng" })
  } catch (error) {
    console.error("‚ùå L·ªói khi x√≥a th√≥i quen:", error)
    res.status(500).json({ error: "Kh√¥ng th·ªÉ x√≥a th√≥i quen" })
  }
})

// API l·∫•y ti·∫øn ƒë·ªô theo ng√†y
app.get("/api/progress", async (req, res) => {
  try {
    const date = req.query.date
    console.log("üìä Nh·∫≠n y√™u c·∫ßu l·∫•y ti·∫øn ƒë·ªô cho ng√†y:", date)

    const progress = await readData(progressFile)

    // L·ªçc ti·∫øn ƒë·ªô theo ng√†y
    const filteredProgress = date ? progress.filter((p) => p.date === date) : progress

    res.json(filteredProgress)
  } catch (error) {
    console.error("‚ùå L·ªói khi l·∫•y ti·∫øn ƒë·ªô:", error)
    res.status(500).json({ error: "Kh√¥ng th·ªÉ l·∫•y ti·∫øn ƒë·ªô" })
  }
})

// API c·∫≠p nh·∫≠t ti·∫øn ƒë·ªô
app.post("/api/progress", async (req, res) => {
  try {
    const { habitId, date, value } = req.body

    console.log("üìà Nh·∫≠n y√™u c·∫ßu c·∫≠p nh·∫≠t ti·∫øn ƒë·ªô:", req.body)

    // Ki·ªÉm tra d·ªØ li·ªáu ƒë·∫ßu v√†o
    if (!habitId) {
      console.error("‚ùå Thi·∫øu habitId:", req.body)
      return res.status(400).json({ error: "Thi·∫øu habitId" })
    }

    if (habitId === "") {
      console.error("‚ùå habitId kh√¥ng h·ª£p l·ªá (r·ªóng):", req.body)
      return res.status(400).json({ error: "habitId kh√¥ng h·ª£p l·ªá (r·ªóng)" })
    }

    if (!date) {
      console.error("‚ùå Thi·∫øu date:", req.body)
      return res.status(400).json({ error: "Thi·∫øu date" })
    }

    if (value === undefined) {
      console.error("‚ùå Thi·∫øu value:", req.body)
      return res.status(400).json({ error: "Thi·∫øu value" })
    }

    // Ki·ªÉm tra th√≥i quen t·ªìn t·∫°i
    const habits = await readData(habitsFile)
    const habit = habits.find((h) => h.id === habitId)

    if (!habit) {
      console.error("‚ùå Kh√¥ng t√¨m th·∫•y th√≥i quen:", habitId)
      return res.status(404).json({ error: "Kh√¥ng t√¨m th·∫•y th√≥i quen" })
    }

    const progress = await readData(progressFile)

    // T√¨m ti·∫øn ƒë·ªô hi·ªán t·∫°i
    const index = progress.findIndex((p) => p.habitId === habitId && p.date === date)

    if (index === -1) {
      // T·∫°o m·ªõi n·∫øu ch∆∞a c√≥
      const newProgress = {
        id: `progress_${Date.now()}_${Math.floor(Math.random() * 1000)}`,
        habitId,
        date,
        value,
        updatedAt: new Date().toISOString(),
      }
      progress.push(newProgress)
    } else {
      // C·∫≠p nh·∫≠t n·∫øu ƒë√£ c√≥
      progress[index].value = value
      progress[index].updatedAt = new Date().toISOString()
    }

    // L∆∞u v√†o file
    await writeData(progressFile, progress)

    console.log("‚úÖ ƒê√£ c·∫≠p nh·∫≠t ti·∫øn ƒë·ªô th√†nh c√¥ng:", { habitId, date, value })

    res.json({ message: "ƒê√£ c·∫≠p nh·∫≠t ti·∫øn ƒë·ªô th√†nh c√¥ng" })
  } catch (error) {
    console.error("‚ùå L·ªói khi c·∫≠p nh·∫≠t ti·∫øn ƒë·ªô:", error)
    res.status(500).json({ error: "Kh√¥ng th·ªÉ c·∫≠p nh·∫≠t ti·∫øn ƒë·ªô" })
  }
})
