import 'dart:convert';
import 'package:http/http.dart' as http;
import '../models/habit_model.dart';
import 'package:intl/intl.dart';

class HabitService {
  // URL c·ªßa API server
  final String baseUrl;
  
  HabitService({required this.baseUrl});

  // Format ng√†y th√†nh chu·ªói YYYY-MM-DD
  String _formatDate(DateTime date) {
    return DateFormat('yyyy-MM-dd').format(date);
  }

  // L·∫•y danh s√°ch th√≥i quen
  Future<List<Habit>> getHabits() async {
    try {
      final response = await http.get(Uri.parse('$baseUrl/api/habits'));
      
      if (response.statusCode == 200) {
        final List<dynamic> data = json.decode(response.body);
        return data.map((json) => Habit.fromJson(json)).toList();
      } else {
        throw Exception('Kh√¥ng th·ªÉ l·∫•y danh s√°ch th√≥i quen: ${response.statusCode} - ${response.body}');
      }
    } catch (e) {
      throw Exception('L·ªói khi l·∫•y danh s√°ch th√≥i quen: $e');
    }
  }

  // L·∫•y chi ti·∫øt th√≥i quen
  Future<Habit> getHabit(String id) async {
    try {
      final response = await http.get(Uri.parse('$baseUrl/api/habits/$id'));
      
      if (response.statusCode == 200) {
        return Habit.fromJson(json.decode(response.body));
      } else {
        throw Exception('Kh√¥ng th·ªÉ l·∫•y chi ti·∫øt th√≥i quen: ${response.statusCode} - ${response.body}');
      }
    } catch (e) {
      throw Exception('L·ªói khi l·∫•y chi ti·∫øt th√≥i quen: $e');
    }
  }

  // T·∫°o th√≥i quen m·ªõi
  Future<Habit> createHabit(Habit habit) async {
    try {
      print('üöÄ ƒêang g·ª≠i y√™u c·∫ßu t·∫°o th√≥i quen m·ªõi: ${habit.name}');
      print('üìù D·ªØ li·ªáu g·ª≠i: ${habit.toJson()}');
      
      final response = await http.post(
        Uri.parse('$baseUrl/api/habits'),
        headers: {'Content-Type': 'application/json'},
        body: json.encode(habit.toJson()),
      );
      
      print('üì• Response status: ${response.statusCode}');
      print('üì• Response body: ${response.body}');
      
      if (response.statusCode == 201) {
        final responseData = json.decode(response.body);
        
        // Ki·ªÉm tra ID trong response
        if (responseData['id'] == null || responseData['id'].toString().isEmpty) {
          print('‚ùå L·ªói: Server tr·∫£ v·ªÅ ID r·ªóng ho·∫∑c null');
          throw Exception('Server tr·∫£ v·ªÅ ID kh√¥ng h·ª£p l·ªá');
        }
        
        // T·∫°o ƒë·ªëi t∆∞·ª£ng Habit t·ª´ response
        final newHabit = Habit.fromJson(responseData);
        
        // Ki·ªÉm tra l·∫°i ID sau khi parse
        if (newHabit.id.isEmpty) {
          print('‚ùå L·ªói: ID c·ªßa th√≥i quen m·ªõi t·∫°o r·ªóng sau khi parse');
          throw Exception('ID c·ªßa th√≥i quen m·ªõi t·∫°o kh√¥ng h·ª£p l·ªá sau khi parse');
        }
        
        print('‚úÖ Th√≥i quen m·ªõi t·∫°o th√†nh c√¥ng: ${newHabit.name} v·ªõi ID: ${newHabit.id}');
        return newHabit;
      } else {
        throw Exception('Kh√¥ng th·ªÉ t·∫°o th√≥i quen m·ªõi: ${response.statusCode} - ${response.body}');
      }
    } catch (e) {
      print('‚ùå L·ªói khi t·∫°o th√≥i quen m·ªõi: $e');
      throw Exception('L·ªói khi t·∫°o th√≥i quen m·ªõi: $e');
    }
  }

  // C·∫≠p nh·∫≠t th√≥i quen
  Future<Habit> updateHabit(Habit habit) async {
    try {
      final response = await http.put(
        Uri.parse('$baseUrl/api/habits/${habit.id}'),
        headers: {'Content-Type': 'application/json'},
        body: json.encode(habit.toJson()),
      );
      
      if (response.statusCode == 200) {
        return Habit.fromJson(json.decode(response.body));
      } else {
        throw Exception('Kh√¥ng th·ªÉ c·∫≠p nh·∫≠t th√≥i quen: ${response.statusCode} - ${response.body}');
      }
    } catch (e) {
      throw Exception('L·ªói khi c·∫≠p nh·∫≠t th√≥i quen: $e');
    }
  }

  // X√≥a th√≥i quen
  Future<void> deleteHabit(String id) async {
    try {
      final response = await http.delete(Uri.parse('$baseUrl/api/habits/$id'));
      
      if (response.statusCode != 200) {
        throw Exception('Kh√¥ng th·ªÉ x√≥a th√≥i quen: ${response.statusCode} - ${response.body}');
      }
    } catch (e) {
      throw Exception('L·ªói khi x√≥a th√≥i quen: $e');
    }
  }

  // L·∫•y ti·∫øn ƒë·ªô theo ng√†y
  Future<List<HabitProgress>> getProgressByDate(DateTime date) async {
    try {
      final formattedDate = _formatDate(date);
      final response = await http.get(
        Uri.parse('$baseUrl/api/progress?date=$formattedDate'),
      );
      
      if (response.statusCode == 200) {
        final List<dynamic> data = json.decode(response.body);
        return data.map((json) => HabitProgress.fromJson(json)).toList();
      } else {
        throw Exception('Kh√¥ng th·ªÉ l·∫•y ti·∫øn ƒë·ªô: ${response.statusCode} - ${response.body}');
      }
    } catch (e) {
      throw Exception('L·ªói khi l·∫•y ti·∫øn ƒë·ªô: $e');
    }
  }

  // C·∫≠p nh·∫≠t ti·∫øn ƒë·ªô
  Future<void> updateProgress(String habitId, DateTime date, int value) async {
    try {
      // Ki·ªÉm tra habitId c√≥ h·ª£p l·ªá kh√¥ng
      if (habitId.isEmpty) {
        throw Exception('habitId kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng');
      }
      
      final formattedDate = _formatDate(date);
      
      print('C·∫≠p nh·∫≠t ti·∫øn ƒë·ªô: habitId=$habitId, date=$formattedDate, value=$value');
      
      final response = await http.post(
        Uri.parse('$baseUrl/api/progress'),
        headers: {'Content-Type': 'application/json'},
        body: json.encode({
          'habitId': habitId,
          'date': formattedDate,
          'value': value,
        }),
      );
      
      print('K·∫øt qu·∫£ c·∫≠p nh·∫≠t ti·∫øn ƒë·ªô: ${response.statusCode} - ${response.body}');
      
      if (response.statusCode != 200) {
        throw Exception('Kh√¥ng th·ªÉ c·∫≠p nh·∫≠t ti·∫øn ƒë·ªô: ${response.statusCode} - ${response.body}');
      }
    } catch (e) {
      print('L·ªói khi c·∫≠p nh·∫≠t ti·∫øn ƒë·ªô: $e');
      throw Exception('L·ªói khi c·∫≠p nh·∫≠t ti·∫øn ƒë·ªô: $e');
    }
  }
}
